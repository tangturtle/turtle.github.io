<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安装基于Hyper-V的ArchLinux虚拟机</title>
      <link href="/posts/2290109682.html"/>
      <url>/posts/2290109682.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装基于Hyper-V的ArchLinux虚拟机"><a href="#安装基于Hyper-V的ArchLinux虚拟机" class="headerlink" title=" 安装基于Hyper-V的ArchLinux虚拟机"></a><center> 安装基于Hyper-V的ArchLinux虚拟机</h1><h2 id="Step-0：检查电脑是否支持"><a href="#Step-0：检查电脑是否支持" class="headerlink" title="Step 0：检查电脑是否支持"></a>Step 0：检查电脑是否支持</h2><p>  要求:</p><ol><li>Windows 11 Pro or Enterprise 64-bit Operating System </li><li>A minimum of 4 GB of RAM</li><li>BIOS-level hardware virtualization support</li></ol><p>  检查方法:</p><ol><li>按 <code>win</code>+<code>R</code>键，输入 <code>msinfo32</code>并回车</li><li>在 <code>系统摘要</code>部分并查找 <code>Hyper-V 要求</code>。如果显示 <code>Yes</code>，则您的系统兼容。</li></ol><h2 id="Step-1：启用Hyper-V"><a href="#Step-1：启用Hyper-V" class="headerlink" title="Step 1：启用Hyper-V"></a>Step 1：启用Hyper-V</h2><ol><li>在 BIOS 启用虚拟化(默认开启，可自行搜索开启方法)</li><li>按 <code>win</code>+<code>S</code>键，输入 <code>启用或关闭Windows功能</code>，找到 <code>Hyper-V</code>并勾选,确定，重启后就好了<br><img src="/posts/2290109682/1737463768157.png" alt="1737463768157"></li></ol><h2 id="Step-2：配置Hyper-V虚拟机"><a href="#Step-2：配置Hyper-V虚拟机" class="headerlink" title="Step 2：配置Hyper-V虚拟机"></a>Step 2：配置Hyper-V虚拟机</h2><ol><li><code>win</code>+<code>S</code>搜索并打开 <code>Hyper-V 管理器</code></li><li>点击 <code>Hyper-V 设置</code>并按自己喜好设置</li><li>点击 <code>新建</code> -&gt; <code>虚拟机</code></li><li>按照喜好设置名称，位置，内存等。<br><img src="/posts/2290109682/1737464585792.png" alt="1737464585792"><br><img src="/posts/2290109682/1737464644989.png" alt="1737464644989"><br><img src="/posts/2290109682/1737464662603.png" alt="1737464662603"><br><img src="/posts/2290109682/1737464675912.png" alt="1737464675912"><br><img src="/posts/2290109682/1737464695796.png" alt="1737464695796"><br><img src="/posts/2290109682/1737464713352.png" alt="1737464713352"></li></ol><h2 id="Step-3：准备ArchLinux镜像"><a href="#Step-3：准备ArchLinux镜像" class="headerlink" title="Step 3：准备ArchLinux镜像"></a>Step 3：准备ArchLinux镜像</h2><ol start="0"><li>下载镜像<br><a href="https://mirrors.ustc.edu.cn/archlinux/iso/latest/">国内ustc镜像站</a><br>下载<a href="https://mirrors.ustc.edu.cn/archlinux/iso/latest/archlinux-x86_64.iso">archlinux-x86_64.iso</a></li><li>双击 <code>Arch</code>，或点击 <code>连接</code>，找到 <code>文件</code>-&gt;<code>设置</code><br><img src="/posts/2290109682/1737465447188.png" alt="1737465447188"><br>点击 <code>SCSI控制器</code>，点 <code>添加</code>，选择 <code>DVD驱动器</code>，点 <code>添加</code><br><img src="/posts/2290109682/1737466382798.png" alt="1737466382798"><br><img src="/posts/2290109682/1737466415042.png" alt="1737466415042"><br>选择你下载的iso文件，最后点确定。<br>将iso作为第一启动项<br><img src="/posts/2290109682/1737466623181.png" alt="1737466623181"></li><li>关闭安全启动！！否则无法安装！！<br><img src="/posts/2290109682/1737466483836.png" alt="1737466483836"></li></ol><h2 id="Step-4：开始安装"><a href="#Step-4：开始安装" class="headerlink" title="Step 4：开始安装"></a>Step 4：开始安装</h2><ol><li><p>点击 <code>启动</code>，按 <code>回车</code>开始安装</p></li><li><p>检查网络<br>使用 <code>ping www.baidu.com</code>检查网络是否通畅<br><img src="/posts/2290109682/1737547995247.png" alt="1737547995247"><br>使用 <code>timedatectl</code>校验时间</p><ul><li><code>timedatectl list-timezones</code>列出所有时区</li><li><code>timedatectl set-timezone Asia/Shanghai</code>设置时区为上海<br><img src="/posts/2290109682/1737548205526.png" alt="1737548205526"></li></ul></li><li><p>创建硬盘分区</p><ul><li>使用 <code>fdisk -l</code>查看所有可用硬盘<br>结果中以 <code>rom</code>、<code>loop</code> 或者 <code>airootfs</code>结尾的设备可以被忽略。结果中以 <code>rpbm</code>、<code>boot0</code> 或者 <code>boot1</code>结尾的 <code>mmcblk*</code> 设备也可以被忽略。(由图可见我是200G)<br><img src="/posts/2290109682/1737548451260.png" alt="1737548451260"></li><li>开始分区<br>这里贴出<a href="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97">Arch Wiki的安装指南</a>给出的要求<br><img src="/posts/2290109682/1737549156159.png" alt="1737549156159"><br><img src="/posts/2290109682/1737549406862.png" alt="1737549406862"><br>使用 <code>cfdisk /dev/&lt;your_disk&gt;</code>命令进行分区<ul><li>回车后选 <code>gpt</code>格式并回车<br><img src="/posts/2290109682/1737550390766.png" alt="1737550390766"></li><li>根据要求进行分区<br><img src="/posts/2290109682/1737550533230.png" alt="1737550533230"></li><li>最后 <code>Write</code>回车输入 <code>yes</code>以写入</li></ul></li><li>格式化分区<ul><li>在根分区 <code>/dev/root_partition</code> 上创建一个 <code>Ext4</code> 文件系统<br>使用 <code>mkfs.ext4 /dev/root_partition(根分区)</code></li><li>创建交换分区<br>使用 <code>mkswap /dev/swap_partition(交换空间分区)</code></li><li>创建一个 EFI 系统分区<br>使用 <code>mkfs.fat -F 32 /dev/efi_system_partition(EFI 系统分区)</code><br><img src="/posts/2290109682/1737551263139.png" alt="1737551263139"></li></ul></li><li>挂载分区 <em><strong>【本步骤注意挂在顺序不要出错，以免发生奇怪的错误】</strong></em><br><img src="/posts/2290109682/1737551546925.png" alt="1737551546925"><ul><li>将根磁盘卷挂载到 <code>/mnt</code><br><code>mount /dev/root_partition(根分区) /mnt</code></li><li>挂载 <code>EFI</code> 系统分区<br><code>mount --mkdir /dev/efi_system_partition(EFI分区) /mnt/boot</code></li><li>挂载交换分区<br><code>swapon /dev/swap_partition(交换空间分区)</code><br><img src="/posts/2290109682/1737551728904.png" alt="1737551728904"></li><li>如果没有输出说明成功了</li></ul></li></ul></li><li><p>安装系统</p><ul><li>系统的文件 <code>/etc/pacman.d/mirrorlist</code> 中定义了软件包会从哪个镜像站下载<br>使用 <code>curl -L &#39;https://archlinux.org/mirrorlist/?country=CN&amp;protocol=https&#39; -o /etc/pacman.d/mirrorlist</code>下载位于中国大陆的 HTTPS 镜像站<br>使用 <code>vim</code>取消注释你想要的镜像站【<a href="https://www.runoob.com/linux/linux-vim.html">vim基础使用说明</a>】<br><img src="/posts/2290109682/1737552318801.png" alt="1737552318801"><br><img src="/posts/2290109682/1737552365670.png" alt="1737552365670"></li><li>安装必要软件包<br>安装 <code>base</code>包和 <code>Linux</code>内核以及常规硬件的固件：<br><code>pacstrap -K /mnt base linux linux-firmware</code><br>其中 <code>Linux</code>可以替换为其他<a href="https://wiki.archlinuxcn.org/wiki/%E5%86%85%E6%A0%B8">内核</a><br><img src="/posts/2290109682/1737552787198.png" alt="1737552787198"><br><em><strong>该图片来源<a href="https://arch.icekylin.online/guide/advanced/optional-cfg-2">可选配置（进阶篇） | archlinux 简明指南</a></strong></em><br>安装其他软件包：<br><code>pacstrap -K /mnt linux-headers base-devel vim git bash-completion man</code></li></ul></li><li><p>配置系统</p><ul><li>生成 <code>fstab</code>文件<br><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code><br>使用 <code>cat</code>查看文件内容以检查是否正确<br><img src="/posts/2290109682/1737553719428.png" alt="1737553719428"></li><li><code>chroot</code> 到新安装的系统<br><code>arch-chroot /mnt</code><br><img src="/posts/2290109682/1737553811534.png" alt="1737553811534"></li><li>设置时区<ul><li>通过以下命令设置时区<br><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></li><li>运行 <code>hwclock</code>以生成 <code>/etc/adjtime</code><br><code>hwclock --systohc</code></li><li>如果正常则没有输出<br><img src="/posts/2290109682/1737554042443.png" alt="1737554042443"></li></ul></li><li>区域和本地化设置<br><img src="/posts/2290109682/1737554149809.png" alt="1737554149809"><br>编辑 <code>/etc/locale.gen</code>，然后取消掉 <code>en_US.UTF-8 UTF-8</code> 和其他需要的 UTF-8 区域设置前的注释<br><img src="/posts/2290109682/1737554468162.png" alt="1737554468162"><br>接着执行 <code>locale-gen</code> 以生成 <code>locale</code> 信息：<br><code>locale-gen</code><br><img src="/posts/2290109682/1737554502880.png" alt="1737554502880"><br>然后创建 <code>/etc/locale.conf</code> 文件，并编辑设定 <code>LANG</code> 变量<br><img src="/posts/2290109682/1737554614825.png" alt="1737554614825"></li><li>网络配置<ul><li>创建 <code>/etc/hostname</code> 文件并设置主机名<br><img src="/posts/2290109682/1737554806985.png" alt="1737554806985"><br>【将 <code>yourname</code>替换为你自己的主机名】</li><li>安装并启动 <code>networkmanager</code>以便后续联网使用:<br><code>pacman -S networkmanager</code><br><code>systemctl enable NetworkManager</code><br><img src="/posts/2290109682/1737555768339.png" alt="1737555768339"></li><li>配置 <code>hosts</code>文件<br><img src="/posts/2290109682/1737556255602.png" alt="1737556255602"><br>【将 <code>yourname</code>替换为你自己的主机名】</li></ul></li><li>设置 <code>root</code> 密码<br><code>passwd</code></li><li>安装引导程序<br><code>pacman -S grub efibootmgr</code><br>配置 <code>GRUB</code>:<br><code>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</code><br><code>grub-mkconfig -o /boot/grub/grub.cfg</code><br><img src="/posts/2290109682/1737635671321.png" alt="1737635671321"></li></ul></li><li><p>重启</p><ul><li>输入 <code>exit</code>回车退出 <code>chroot</code></li><li>用 <code>umount -R /mnt</code> 手动卸载被挂载的分区</li><li>使用 <code>poweroff</code>关机<br><img src="/posts/2290109682/1737557278831.png" alt="1737557278831"></li><li>在 <code>设置</code>移除 <code>iso</code>镜像<br><img src="/posts/2290109682/1737557347656.png" alt="1737557347656"></li><li>再次启动Arch就行了</li></ul></li></ol><p><strong>注意：</strong> 如果出现无法启动(无法找到启动盘等)的情况，尝试从iso启动，重新挂载并 <code>arch-chroot /mnt</code><br>然后执行<br><code>pacman -S linux(重新安装你的内核)</code><br><code>mkinitcpio -P</code><br><code>grub-mkconfig -o /boot/grub/grub.cfg</code><br>最后再次关机并移除iso</p><h2 id="到此ArchLinux的安装之旅就结束了！"><a href="#到此ArchLinux的安装之旅就结束了！" class="headerlink" title="到此ArchLinux的安装之旅就结束了！"></a>到此ArchLinux的安装之旅就结束了！</h2><h4 id="参考资料：Arch-Wiki"><a href="#参考资料：Arch-Wiki" class="headerlink" title="参考资料：Arch Wiki"></a>参考资料：<a href="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97">Arch Wiki</a></h4>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> Hyper-V </tag>
            
            <tag> Arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的图片上传与本地预览</title>
      <link href="/posts/3700746563.html"/>
      <url>/posts/3700746563.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-的图片上传与本地预览"><a href="#Hexo-的图片上传与本地预览" class="headerlink" title=" Hexo 的图片上传与本地预览"></a><center> Hexo 的图片上传与本地预览</h1><h3 id="方案一-不推荐"><a href="#方案一-不推荐" class="headerlink" title="方案一 (不推荐)"></a>方案一 (不推荐)</h3><h4 id="全局资源文件夹"><a href="#全局资源文件夹" class="headerlink" title="全局资源文件夹"></a>全局资源文件夹</h4><p>即，将所有文章的资源统一用一个全局资源文件夹管理。</p><p>此方法的优点是比较简便，并且当多篇文章需要引用同一资源时，也比较方便。缺点是当文章很多时，各个文章的图片都在同一文件夹，不便管理。</p><h4 id="具体方法："><a href="#具体方法：" class="headerlink" title="具体方法："></a>具体方法：</h4><p>在 hexo 文件夹下的 source 目录下，新建一个文件夹叫 images(名字随意)，将要插入的图片放在该文件夹中。</p><p>在 md 文档内，使用 <code>![图片](图片链接地址 &quot;图片title&quot;)</code>的格式，圆括号内的链接地址写(&#x2F;images&#x2F;name.jpeg)。</p><p>这里的 &#x2F; 指的是根目录，对于 hexo，资源文件的根目录就是 source。</p><p>例如，在 md 文档中写：<code>![图片](/images/20.jpeg &quot;甘雨&quot;)</code><br>同时将“20.jpeg”这个图片文件放在 hexo 文件夹&#x2F;source&#x2F;images 下，则图片可以上传到博客。</p><p>(方案一摘自<a href="https://blog.csdn.net/2301_77285173/article/details/130189857">在 hexo 博客中插入图片的方法</a>)</p><h3 id="方案二-推荐"><a href="#方案二-推荐" class="headerlink" title="方案二 (推荐)"></a>方案二 (推荐)</h3><h4 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h4><p>对每一篇文章使用一个文件夹管理</p><h4 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h4><ol><li><p>修改 <code>_config.yml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 约第43行</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>之后你在 <code>hexo new &quot;title&quot;</code>创建新的文章时在 <code>.md</code>同级目录下生成同名文件夹，你可以在该文件夹下存放图片。</p></li><li><p>在对应的 <code>.md</code>文件内使用 <code>&#123;% asset_img image.jpg 这是一张图片 %&#125;</code>来显示图片</p></li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>方案二在本地预览 <code>.md</code>文件时，由于 <code>&#123;% asset_img image.jpg 这是一张图片 %&#125;</code>并非 markdown 语法，会导致本地无法正常预览解析，可以使用<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>插件。</p><p>该插件允许用户在本地编辑 <code>.md</code>文件时使用 <code>![name](图片名称)</code>这一 markdown 语法以便本地预览，并在 <code>hexo g</code>时自动生成正确的链接</p><p>然而我们可以发现还是无法本地预览，因为图片和 <code>.md</code>文件本身不在同一级目录，所以我们还要对插件进行修改</p><h5 id="修改-hexo-renderer-marked"><a href="#修改-hexo-renderer-marked" class="headerlink" title="修改 hexo-renderer-marked"></a>修改 <code>hexo-renderer-marked</code></h5><p>由于我使用的是vscode的typora插件，设置粘贴图片创建地址为 <code>$&#123;fileName&#125;\$&#123;now&#125;.png</code><br>即.md文件同级目录下 <code>fileName</code>文件夹内<br>文件结构：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">--|<span class="hljs-string"></span><br><span class="hljs-string">  </span>|<span class="hljs-string">---filename-</span>|<span class="hljs-string">---time.jpg</span><br><span class="hljs-string">  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">---time1.jpg</span><br><span class="hljs-string">  </span>|<br>  |<span class="hljs-string">---filename.md</span><br></code></pre></td></tr></table></figure><p>所以对 <code>\node_modules\hexo-renderer-marked\lib\renderer.js</code> 进行修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//约第118行</span><br><br><span class="hljs-comment">// Prepend root to image path</span><br><span class="hljs-title function_">image</span>(<span class="hljs-params">href, title, text</span>) &#123;<br>    <span class="hljs-comment">// 从这里添加3行</span><br>    <span class="hljs-keyword">if</span> (href.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;\\&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>        href = href.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;\\&quot;</span>)[<span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-comment">//文件其他内容</span><br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>搞定，现在可以快乐的写博客了</p>]]></content>
      
      
      <categories>
          
          <category> Hexo设置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件(夹)链接</title>
      <link href="/posts/1705464100.html"/>
      <url>/posts/1705464100.html</url>
      
        <content type="html"><![CDATA[<h1 id="在Windows上怎样为文件-夹-创建链接？"><a href="#在Windows上怎样为文件-夹-创建链接？" class="headerlink" title=" 在Windows上怎样为文件(夹)创建链接？"></a><center> 在Windows上怎样为文件(夹)创建链接？</h1><h3 id="有关【链接】"><a href="#有关【链接】" class="headerlink" title="有关【链接】"></a>有关【链接】</h3><p>在Windows上的链接有三种：</p><ul><li>符号链接</li><li>硬链接</li><li>目录联接(软链接)</li></ul><p>它们有什么区别呢？</p><ol><li>符号链接是将自己链接到一个目标文件或目录的路径上。当系统识别到符号链接时，它会跳转到符号链接所指向的目标中去，而不改变此时的文件路径。<br><img src="/posts/1705464100/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5.png" alt="符号链接"><br>符号链接从Vista开始得到支持，NTFS内置机制。适用于文件，目录。可以理解为另一种形式的快捷方式(shortcut)，文件大小为0字节和不占用空间。可以使用相对&#x2F;绝对路径，可以跨盘符，跨主机，可以使用UNC路径和网络驱动器。</li><li>硬链接和符号链接的原理完全不同，符号链接是指向目标路径的链接，而硬链接则是指向目标数据对象的链接。因为一个卷中的数据对象都有一个独一无二文件 ID，也可以说硬链接是指向目标文件 ID 的链接。<br><img src="/posts/1705464100/%E7%A1%AC%E9%93%BE%E6%8E%A5.png" alt="硬链接"><br>硬链接从Windows NT4开始得到支持，是NTFS内置机制，FAT32不支持。只适用于文件，只能使用绝对路径。本身无文件，不占用额外空间。hardlink与targetfile必须位于同一卷，可以简单理解成不能跨盘符。</li><li>目录链接通过<a href="https://learn.microsoft.com/zh-cn/windows/win32/fileio/reparse-points">重分析点</a>实现。<br>目录联接从Windows2000&#x2F;XP开始得到支持，是NTFS内置机制。只适用于目录。只能使用绝对路径。目录链接通过重分析点实现，目录链接可以跨卷，但是不能跨主机。</li></ol><h3 id="具体实现命令"><a href="#具体实现命令" class="headerlink" title="具体实现命令"></a>具体实现命令</h3><ol><li><p>Cmd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mklink &lt;链接类型&gt; &lt;链接路径&gt; &lt;链接目标&gt;<br><span class="hljs-comment">#&lt;链接类型&gt; 可选 /J /D /H</span><br></code></pre></td></tr></table></figure></li><li><p>PowerShell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">New-Item</span> &lt;链接路径&gt; <span class="hljs-literal">-ItemType</span> &lt;链接类型&gt; <span class="hljs-literal">-Target</span> &lt;链接目标&gt;<br><span class="hljs-comment">#&lt;链接类型&gt; 可选 HardLink  SymbolicLink  Junction</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.cnblogs.com/czwy/p/18442267">Windows 中的硬链接、目录联接(软链接)、符号链接、快捷方式</a></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
